/*
 * @Author: Dongze Yang
 * @Date: 2024-01-27 04:26:02
 * @LastEditors: Dongze Yang
 * @LastEditTime: 2024-03-25 14:34:40
 * @Description: 
 */
import processor.m500_memory.EdgeFF;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import org.junit.jupiter.api.Test;

import java.util.stream.Stream;

//import montiarc.rte.timesync.BooleanInPort;

public class EdgeFFTest {

    private EdgeFF edgeFF;

    @BeforeEach
    void setUp() {
        edgeFF = new EdgeFF();
        edgeFF.setUp();
        edgeFF.init();
    }

    @Test
    void testEdgeFF(){
        boolean [][] input = {
            {true, false, false, false, false, true},
            {false, false, false, false, false, true},
            {false, false, true, false, false, true},
            {false, false, false, true, false, true},
            {false, false, true, true, true, false},
            {false, false, false, false, true, false},
            {false, false, true, false, true, false},
            {false, false, false, true, true, false},
            {false, false, true, true, true, false}
        };

        for(int i = 0; i < input.length; i++){
            System.out.println("-----------" + i + 1 + "-----------");
            edgeFF.getClr().update(input[i][0]);
            edgeFF.getPr().update(input[i][1]);
            edgeFF.getD().update(input[i][2]);
            edgeFF.getCp().update(input[i][3]);
            //System.out.println(dff.getCurrentState());
            edgeFF.compute();
            //System.out.println(dff.getCurrentState());
            Assertions.assertEquals(input[i][4], edgeFF.getQ().getValue(),"expected Q");
            Assertions.assertEquals(input[i][5], edgeFF.getNq().getValue(),"expected NQ");
        }
    }







}
