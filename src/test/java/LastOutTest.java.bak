/*
 * @Author: Dongze Yang
 * @Date: 2024-01-27 04:26:02
 * @LastEditors: Dongze Yang
 * @LastEditTime: 2024-03-27 13:44:23
 * @Description: 
 */
package processor.memory;

import processor.memory.LastOut;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import de.se_rwth.commons.logging.LogStub;
import montiarc.rte.log.Log;

import org.junit.jupiter.api.Test;

import java.util.stream.Stream;

//import montiarc.rte.timesync.BooleanInPort;

public class LastOutTest {

    private LastOut LastOut;

    @BeforeEach
    void setUp() {
        // LastOut = new LastOut();
        // LastOut.setUp();
        // LastOut.init();
        // initialize the Log such that the MontiArc output can be seen
        LogStub.initPlusLog();
        Log.setTraceEnabled(true);
        LogStub.enableFailQuick(false);
    }


    @Test
    public void testLastOut(){
        testRS();
    }



    protected void testRS(){
        LastOut lastOut = new LastOut();
        lastOut.setUp();
        lastOut.init();
    
        boolean [] inputQ = {true, false, true, false, true};
        boolean [] inputNQ = {false, true, false, true, false};

        for (int i = 0; i < 5; i++) {
            System.out.println("------------"+ i +"--------------");
            lastOut.getInputQ().update(inputQ[i]);
            lastOut.getInputNQ().update(inputNQ[i]);

            System.out.println("before state: " + lastOut.getCurrentState());
            lastOut.compute();
            System.out.println("current state: " + lastOut.getCurrentState());
            lastOut.tick();
            System.out.println("iQ: " + inputQ[i] + " iNQ: " + inputNQ[i]);
            System.out.println("Q:  " + lastOut.getOutputQ().getValue() + " NQ: " + lastOut.getOutputNQ().getValue());
            // Assertions.assertEquals(input[i][4], LastOut.getQ().getValue(),"expected Q");
            // Assertions.assertEquals(input[i][5], LastOut.getNq().getValue(),"expected NQ");
        }
        
    }


















    // static Stream<Arguments> testData() {
    //     return Stream.of(
    //         //测试用例格式：r, s, clr, pr, expectedQ, expectedNq
            
    //         //初始清除：初始状态下进行清除。

    //         Arguments.of(false, false, true, false, false, true),
    //         //设置：在清除后设置。

    //         Arguments.of(false, true, false, false, true, false),
    //         //重置：在设置后重置。

    //         Arguments.of(true, false, false, false, false, true),
    //         //再次清除：在重置后进行清除。

    //         Arguments.of(false, false, true, false, false, true),
    //         //预置：在清除后预置。

    //         Arguments.of(false, false, false, true, true, false),
    //         //保持状态：所有输入为 0，保持当前状态（在此案例中，最后的状态是预置，即 q=true, nq=false）。

    //         Arguments.of(false, false, false, false, true, false)


    //     );
    // }

    // @ParameterizedTest
    // @MethodSource("testData")
    // void testLastOut(boolean r, boolean s, boolean clr, boolean pr, boolean expectedQ, boolean expectedNq) {
    //     // 设置输入
    //     // LastOut.setR(r);
    //     // LastOut.setS(s);
    //     // LastOut.setClr(clr);
    //     // LastOut.setPr(pr);
    //     LastOut.getR().update(r);
    //     LastOut.getS().update(s);
    //     LastOut.getClr().update(clr);
    //     LastOut.getPr().update(pr);


    //     System.out.println("-----input: r s clr pr q nq------");
    //     System.out.println(LastOut.getR().getValue()+ " " + 
    //                         LastOut.getS().getValue()+ " " +
    //                         LastOut.getClr().getValue()+ " " +
    //                         LastOut.getPr().getValue()+ " " +
    //                         expectedQ+ " " +
    //                         expectedNq+ " " );
    //     System.out.println("-----------");
    //     System.out.println(LastOut.getCurrentState());
    //     // // 执行计算
    //     LastOut.compute();
    //     System.out.println(LastOut.getCurrentState());
    //     //System.out.println("outputQ = " + LastOut.lastOut.getOutputQ().getValue());
    //     //System.out.println("outputNQ = " + LastOut.lastOut.getOutputNQ().getValue());

    //     System.out.println("-------output----");
    //     System.out.println(LastOut.getR().getValue()+ " " + 
    //                         LastOut.getS().getValue()+ " " +
    //                         LastOut.getClr().getValue()+ " " +
    //                         LastOut.getPr().getValue()+ " " +
    //                         LastOut.getQ().getValue()+ " " +
    //                         LastOut.getNq().getValue()+ " " );
    //     System.out.println("-----------");

    //     // 验证输出
    //     Assertions.assertEquals(expectedQ, LastOut.getQ().getValue(),"expected Q");
    //     Assertions.assertEquals(expectedNq, LastOut.getNq().getValue(),"expected NQ");
    // }
}
